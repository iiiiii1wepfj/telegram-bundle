<?php

namespace Kaula\TelegramBundle\Repository;


use Doctrine\ORM\EntityRepository;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
  /**
   * Finds users using $needle. Looks in the name, nickname and phone.
   *
   * @param string $needle
   * @return array
   * @throws \Exception
   */
  public function findAnyone($needle)
  {
    // Prepare complex AND (OR) AND (OR) ... query
    $parts = explode(' ', $needle);
    $where = ' 1=1';
    $parameters = [];
    $i = 1;
    foreach ($parts as $part) {
      $param_name = 'needle_'.$i++;
      $where .= sprintf(
        ' AND (u.first_name LIKE :%s OR 
          u.last_name LIKE :%s OR 
          u.username LIKE :%s OR 
          u.phone LIKE :%s OR 
          u.phone LIKE :%s OR
          u.external_last_name LIKE :%s OR 
          u.external_first_name LIKE :%s)',
        $param_name,
        $param_name,
        $param_name,
        $param_name,
        $param_name,
        $param_name,
        $param_name
      );
      $parameters[$param_name] = $part;
    }
    $sql = sprintf(
      'SELECT u FROM KaulaTelegramBundle:User u WHERE %s
          ORDER BY u.last_name, u.first_name, u.external_last_name, u.external_first_name ASC',
      $where
    );

    // Create query object
    $query = $this->getEntityManager()
      ->createQuery($sql);
    // Populate parameters
    foreach ($parameters as $param_name => $part) {
      $query->setParameter($param_name, '%'.$part.'%');
    }

    return $query->getResult();
  }

  /**
   * Finds user entity by Telegram ID.
   *
   * @param string $telegramId
   * @return null|object
   */
  public function findByTelegramId($telegramId)
  {
    return $this->findOneBy(['telegram_id' => $telegramId]);
  }
}
