<?php

namespace Kettari\TelegramBundle\Repository;


use Doctrine\ORM\EntityRepository;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
  /**
   * Finds users using $needle. Looks in the name, nickname and phone.
   *
   * @param string $needle
   * @return array
   * @throws \Exception
   */
  public function search(string $needle)
  {
    // Prepare complex AND (OR) AND (OR) ... query
    $parts = explode(' ', $needle);
    $where = ' 1=1';
    $parameters = [];
    $i = 1;
    foreach ($parts as $part) {
      $paramName = 'needle_'.$i++;
      $where .= sprintf(
        ' AND (u.firstName LIKE :%s OR 
          u.lastName LIKE :%s OR 
          u.username LIKE :%s OR 
          u.phone LIKE :%s OR 
          u.phone LIKE :%s OR
          u.externalLastName LIKE :%s OR 
          u.externalFirstName LIKE :%s)',
        $paramName,
        $paramName,
        $paramName,
        $paramName,
        $paramName,
        $paramName,
        $paramName
      );
      $parameters[$paramName] = $part;
    }
    $sql = sprintf(
      'SELECT u FROM KettariTelegramBundle:User u WHERE %s
          ORDER BY u.lastName, u.firstName, u.externalLastName, u.externalFirstName ASC',
      $where
    );

    // Create query object
    $query = $this->getEntityManager()
      ->createQuery($sql);
    // Populate parameters
    foreach ($parameters as $paramName => $part) {
      $query->setParameter($paramName, '%'.$part.'%');
    }

    return $query->getResult();
  }

  /**
   * Finds user entity by Telegram ID.
   *
   * @param string $telegramId
   * @return null|object
   */
  public function findOneByTelegramId($telegramId)
  {
    return $this->findOneBy(['telegramId' => $telegramId]);
  }
}
